// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"sync"

	"github.com/elgohr/go-localstack/internal"
	dockertest "github.com/ory/dockertest/v3"
	"github.com/ory/dockertest/v3/docker"
)

type FakePool struct {
	PurgeStub        func(*dockertest.Resource) error
	purgeMutex       sync.RWMutex
	purgeArgsForCall []struct {
		arg1 *dockertest.Resource
	}
	purgeReturns struct {
		result1 error
	}
	purgeReturnsOnCall map[int]struct {
		result1 error
	}
	RetryStub        func(func() error) error
	retryMutex       sync.RWMutex
	retryArgsForCall []struct {
		arg1 func() error
	}
	retryReturns struct {
		result1 error
	}
	retryReturnsOnCall map[int]struct {
		result1 error
	}
	RunWithOptionsStub        func(*dockertest.RunOptions, ...func(*docker.HostConfig)) (*dockertest.Resource, error)
	runWithOptionsMutex       sync.RWMutex
	runWithOptionsArgsForCall []struct {
		arg1 *dockertest.RunOptions
		arg2 []func(*docker.HostConfig)
	}
	runWithOptionsReturns struct {
		result1 *dockertest.Resource
		result2 error
	}
	runWithOptionsReturnsOnCall map[int]struct {
		result1 *dockertest.Resource
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePool) Purge(arg1 *dockertest.Resource) error {
	fake.purgeMutex.Lock()
	ret, specificReturn := fake.purgeReturnsOnCall[len(fake.purgeArgsForCall)]
	fake.purgeArgsForCall = append(fake.purgeArgsForCall, struct {
		arg1 *dockertest.Resource
	}{arg1})
	fake.recordInvocation("Purge", []interface{}{arg1})
	fake.purgeMutex.Unlock()
	if fake.PurgeStub != nil {
		return fake.PurgeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.purgeReturns
	return fakeReturns.result1
}

func (fake *FakePool) PurgeCallCount() int {
	fake.purgeMutex.RLock()
	defer fake.purgeMutex.RUnlock()
	return len(fake.purgeArgsForCall)
}

func (fake *FakePool) PurgeCalls(stub func(*dockertest.Resource) error) {
	fake.purgeMutex.Lock()
	defer fake.purgeMutex.Unlock()
	fake.PurgeStub = stub
}

func (fake *FakePool) PurgeArgsForCall(i int) *dockertest.Resource {
	fake.purgeMutex.RLock()
	defer fake.purgeMutex.RUnlock()
	argsForCall := fake.purgeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePool) PurgeReturns(result1 error) {
	fake.purgeMutex.Lock()
	defer fake.purgeMutex.Unlock()
	fake.PurgeStub = nil
	fake.purgeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePool) PurgeReturnsOnCall(i int, result1 error) {
	fake.purgeMutex.Lock()
	defer fake.purgeMutex.Unlock()
	fake.PurgeStub = nil
	if fake.purgeReturnsOnCall == nil {
		fake.purgeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.purgeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePool) Retry(arg1 func() error) error {
	fake.retryMutex.Lock()
	ret, specificReturn := fake.retryReturnsOnCall[len(fake.retryArgsForCall)]
	fake.retryArgsForCall = append(fake.retryArgsForCall, struct {
		arg1 func() error
	}{arg1})
	fake.recordInvocation("Retry", []interface{}{arg1})
	fake.retryMutex.Unlock()
	if fake.RetryStub != nil {
		return fake.RetryStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.retryReturns
	return fakeReturns.result1
}

func (fake *FakePool) RetryCallCount() int {
	fake.retryMutex.RLock()
	defer fake.retryMutex.RUnlock()
	return len(fake.retryArgsForCall)
}

func (fake *FakePool) RetryCalls(stub func(func() error) error) {
	fake.retryMutex.Lock()
	defer fake.retryMutex.Unlock()
	fake.RetryStub = stub
}

func (fake *FakePool) RetryArgsForCall(i int) func() error {
	fake.retryMutex.RLock()
	defer fake.retryMutex.RUnlock()
	argsForCall := fake.retryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePool) RetryReturns(result1 error) {
	fake.retryMutex.Lock()
	defer fake.retryMutex.Unlock()
	fake.RetryStub = nil
	fake.retryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePool) RetryReturnsOnCall(i int, result1 error) {
	fake.retryMutex.Lock()
	defer fake.retryMutex.Unlock()
	fake.RetryStub = nil
	if fake.retryReturnsOnCall == nil {
		fake.retryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.retryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePool) RunWithOptions(arg1 *dockertest.RunOptions, arg2 ...func(*docker.HostConfig)) (*dockertest.Resource, error) {
	fake.runWithOptionsMutex.Lock()
	ret, specificReturn := fake.runWithOptionsReturnsOnCall[len(fake.runWithOptionsArgsForCall)]
	fake.runWithOptionsArgsForCall = append(fake.runWithOptionsArgsForCall, struct {
		arg1 *dockertest.RunOptions
		arg2 []func(*docker.HostConfig)
	}{arg1, arg2})
	fake.recordInvocation("RunWithOptions", []interface{}{arg1, arg2})
	fake.runWithOptionsMutex.Unlock()
	if fake.RunWithOptionsStub != nil {
		return fake.RunWithOptionsStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.runWithOptionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePool) RunWithOptionsCallCount() int {
	fake.runWithOptionsMutex.RLock()
	defer fake.runWithOptionsMutex.RUnlock()
	return len(fake.runWithOptionsArgsForCall)
}

func (fake *FakePool) RunWithOptionsCalls(stub func(*dockertest.RunOptions, ...func(*docker.HostConfig)) (*dockertest.Resource, error)) {
	fake.runWithOptionsMutex.Lock()
	defer fake.runWithOptionsMutex.Unlock()
	fake.RunWithOptionsStub = stub
}

func (fake *FakePool) RunWithOptionsArgsForCall(i int) (*dockertest.RunOptions, []func(*docker.HostConfig)) {
	fake.runWithOptionsMutex.RLock()
	defer fake.runWithOptionsMutex.RUnlock()
	argsForCall := fake.runWithOptionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePool) RunWithOptionsReturns(result1 *dockertest.Resource, result2 error) {
	fake.runWithOptionsMutex.Lock()
	defer fake.runWithOptionsMutex.Unlock()
	fake.RunWithOptionsStub = nil
	fake.runWithOptionsReturns = struct {
		result1 *dockertest.Resource
		result2 error
	}{result1, result2}
}

func (fake *FakePool) RunWithOptionsReturnsOnCall(i int, result1 *dockertest.Resource, result2 error) {
	fake.runWithOptionsMutex.Lock()
	defer fake.runWithOptionsMutex.Unlock()
	fake.RunWithOptionsStub = nil
	if fake.runWithOptionsReturnsOnCall == nil {
		fake.runWithOptionsReturnsOnCall = make(map[int]struct {
			result1 *dockertest.Resource
			result2 error
		})
	}
	fake.runWithOptionsReturnsOnCall[i] = struct {
		result1 *dockertest.Resource
		result2 error
	}{result1, result2}
}

func (fake *FakePool) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.purgeMutex.RLock()
	defer fake.purgeMutex.RUnlock()
	fake.retryMutex.RLock()
	defer fake.retryMutex.RUnlock()
	fake.runWithOptionsMutex.RLock()
	defer fake.runWithOptionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePool) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.Pool = new(FakePool)
